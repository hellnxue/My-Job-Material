<?xml version="1.0" encoding="UTF-8"?>
<beans
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd 
	http://www.springframework.org/schema/context 
	http://www.springframework.org/schema/context/spring-context-3.0.xsd
	" >
<!-- 数据源对象 -->    
    <bean id="dataSource" 
        class="org.springframework.jdbc.datasource.DriverManagerDataSource"> 
        <!-- 数据库驱动 -->
        <property name="driverClassName"> 
            <value>com.mysql.jdbc.Driver</value>
        </property> 
        <!-- 数据库地址 ，注意编码格式-->
        <property name="url"> 
            <value>jdbc:mysql://localhost:3306/um?useUnicode=true&amp;characterEncoding=UTF-8</value>
        </property> 
        <property name="username"> 
            <value>root</value> 
        </property> 
        <property name="password"> 
            <value></value> 
        </property> 
    </bean>
    <!-- 创建SqlSessionFactory，同时注入数据源-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
      <property name="dataSource" ref="dataSource" /> 
      <!-- 指定sqlMapConfig总配置文件，订制的environment在spring容器中不在生效-->
      <property  name="configLocation"  value="classpath:MyBatisConfig.xml"/>
      <!--指定实体类映射文件，可以指定同时指定某一包以及子包下面的所有配置文件，mapperLocations和configLocation有一个即可，当需要为实体类指定别名时，可指定configLocation属性，再在mybatis总配置文件中采用mapper引入实体类映射文件 -->
      <!-- <property  name="mapperLocations"  value="classpath*:com/xxt/ibatis/dbcp/**/*.xml"/>  -->
   </bean>
   <!-- 操作数据库所用对象sqlSessionTemplate -->
	<bean id="sqlSessionTemplate"   class="org.mybatis.spring.SqlSessionTemplate">
       <constructor-arg index="0" ref="sqlSessionFactory" />
 </bean>
 <!-- 配置事物管理  
    <bean id="txManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager" >
          <property name="sessionFactory" ref="sessionFactory"/>
         
    </bean>
    -->
    <tx:annotation-driven transaction-manager="txManager"  />

    
    
    <!-- 配置事务管理器（支持mybatis），注意这里的dataSource和SqlSessionFactoryBean的dataSource要一致，不然事务就没有作用了 -->
	<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
	    <property name="dataSource" ref="dataSource" />
	</bean>
	
	
	<!-- 配置事务的传播特性 
		在业务层接口中使用事务需要设置这个接口的parent属性为baseTransactionProxy.target是该接口的实现类
		例子看数据字典模块service层接口配置文件spring-datadictionary-service.xml 。
	
	<bean id="baseTransactionProxy" class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean" abstract="true">
	    <property name="transactionManager" ref="transactionManager" />
	    <property name="transactionAttributes">
	        <props>
	            <prop key="add*">PROPAGATION_REQUIRED</prop>
	            <prop key="edit*">PROPAGATION_REQUIRED</prop>
	            <prop key="remove*">PROPAGATION_REQUIRED</prop>
	            <prop key="insert*">PROPAGATION_REQUIRED</prop> 
	            <prop key="del*">PROPAGATION_REQUIRED</prop>
	            <prop key="*">readOnly</prop>
	        </props>
	    </property>
	</bean>
-->
  <!-- IOC控制翻转   依赖注入 -->
  <bean id="userAction" class="com.anbo.action.UserAction">
     <property name="userService" ref="userService"></property>
  </bean>
  <bean id="userService" class="com.anbo.service.Impl.UserServiceImpl">
    <property name="userDao" ref="userDao"></property>
  </bean>
    <bean id="userDao" class="com.anbo.dao.impl.UserDAOImpl">
    <!--注入SqlSessionTemplate实例 -->
    <property name="sqlSessionTemplate" ref="sqlSessionTemplate" />
  </bean>
</beans>